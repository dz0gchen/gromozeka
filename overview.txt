Задание: Разработка консольной утилиты для нагрузочного тестирования

Цель: Создать консольную утилиту для проведения нагрузочных тестов на сервис, с возможностью задавать количество запросов в секунду (RPS) и количество одновременных пользователей. Утилита должна собирать статистику по времени ответа, среднему времени, максимальному времени и HTTP-кодам ответов.

    Описание функциональных требований

1.1. Утилита должна принимать следующие параметры командной строки:

    --rps (обязательный): количество запросов в секунду;
    --users (обязательный): количество одновременных пользователей;
    --url (обязательный): адрес сервиса, который подвергается нагрузочному тестированию;
    --duration (опциональный): продолжительность тестирования в секундах (по умолчанию 10 секунд).

1.2. Утилита должна использовать многопоточность или асинхронность для имитации одновременных запросов от пользователей.

1.3. Утилита должна собирать следующую статистику:

    Время ответа для каждого запроса;
    Среднее время ответа;
    Максимальное время ответа;
    Количество ответов с каждым HTTP-кодом.

1.4. По завершении тестирования утилита должна выводить статистику в консоль в удобном для восприятия формате.

1.5. Утилита должна быть написана на языке Python 3.

1.6. Рекомендуется использовать стандартные библиотеки Python, однако можно использовать внешние библиотеки при необходимости.

1.7. В репозитории проекта должен быть файл README.md, содержащий информацию о следующем:

    Описание утилиты, её функционала и назначения;
    Инструкция по установке и настройке утилиты;
    Примеры использования утилиты с различными параметрами.


--------------------------------------------------------------------------------------------------------------------------------
Интерпретация условий задачи:

1.1. --rps (обязательный): количество запросов в секунду - при использовании asyncio нетривиальная задача,
   как вариант:
   близкий по смыслу подход - задать лимит на количество одновременных подключений в библиотеке aiohttp через
   переопределение aiohttp.TCPConnector(limit=n, limit_per_host=n), только соединение создается
   в рамках переиспользуемой сессии, получаем всегда одно соединение на цикл событий: conn number == --users number,
   проверка осуществлялась консольной утилитой sudo netstat -anp | grep <address> | grep ESTABLISHED | wc -l;

   исходя из условий задачи трактовал данный параметр как rate limit, не более n (--rps) запросов в секунду,
   переопределение aiohttp.TCPConnector в коде решает другую задачу - устранение избыточных потоков при разрешении адреса,
   в текущей реализации наблюдается небольшая погрешность между ожидаемым rate limit исходя из значения --rps
   и фактическим значением;

   примечание:
   при последовательном увеличении параметра в какой-то момент мы должны начать получать примерно одинаковое
   значение общего количества запросов - упремся в производительность тестируемого сервера или в настройки rate limit
   сервера ( или средств обнаружения атак)

1.2  --users (обязательный): количество одновременных пользователей - для имитации сущности пользователя
    будем использовать многопоточность, хотя многопроцессность подходит больше, утилита htop визуально отображает
    главный процесс и дочерние потоки в количестве равном параметру при использовании ThreadPoolExecutor,
    параметр скорее номинальный, в работе будет всегда один поток, --rps действует как ограничитель внутри него

1.3 используются только http запросы с методом get

1.4 поскольку мы вынуждены сохранять информацию по каждому запросу,
    существует вероятность падения в ошибку скрипта при задании больших значений --users и --duration,
    когда объем используемой памяти превысит выделенную изначально при старте процесса скрипта

1.5 специфичные моменты помечены комментариями в коде

